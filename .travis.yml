env:
  global:
    - Features="use-mock-routing testing"
    - RUST_BACKTRACE=1
    - TARGET=x86_64-unknown-linux-gnu
    - PATH="$PATH:$HOME/.cargo/bin"
    - DEPLOY_RUST_V="stable"
    - CRATES_CONFIG='declare -a FMT_CHECK_CRATES=("ffi_utils" "safe_core" "safe_app" "safe_authenticator"); declare -a TEST_CRATES=("safe_core" "safe_app" "safe_authenticator"); declare -a DEPLOY_CRATES=("safe_app" "safe_authenticator"); declare -a DEPLOY_FEATURES=("use-mock-routing testing,dev")'

language: rust
rust:
  - 1.17.0
  - nightly-2017-04-28services: docker
sudo: required
dist: trusty

addons:
  apt:
    packages:
      - desktop-file-utils
      - xdg-utils
      - gcc-multilib
      - musl
      - musl-dev
      - musl-tools
      # - gcc-mingw-w64-base
      # - binutils-mingw-w64-x86-64
      # - g++-mingw-w64-x86-64
      # - gcc-mingw-w64-x86-64
      # - g++-mingw-w64
      # - mingw-w64-x86-64-dev

matrix:
  fast_finish: true
  include:

    # check clippy:
    - os: linux
      env: CLIPPY_VERSION=0.0.128;
      rust: nightly-2017-04-28


    # Linux
    - env: >
        TARGET_NAME=linux-x64
      os: linux

    - env: >
        TARGET=i686-unknown-linux-gnu
        TARGET_NAME=linux-ia32
      os: linux

      # static linked
    # - env: >
    #     TARGET=i686-unknown-linux-musl
    #   os: linux
    - env: >
        TARGET=x86_64-unknown-linux-musl
      os: linux

    # windows:
    # - env: >
    #     TARGET=i686-pc-windows-gnu
    #     TARGET_NAME=win32-x32
    #   os: linux
    # - env: >
    #     TARGET=x86_64-pc-windows-gnu
    #     TARGET_NAME=win32-x64
    #   os: linux

    # OSX
    - env: >
        TARGET=i686-apple-darwin
        TARGET_NAME=darwin-ia32
        MACOSX_DEPLOYMENT_TARGET=10.7
      os: osx
    - env: >
        TARGET=x86_64-apple-darwin
        TARGET_NAME=darwin-x64
        MACOSX_DEPLOYMENT_TARGET=10.7
      os: osx

branches:
  only:
    - master
    - dev
    - /^v\d+\.\d+\.\d+.*$/

cache:
  cargo: true

before_install:
  - set -e
  - if [ ! -z $TRAVIS_TAG ]; then
      curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain "$TRAVIS_RUST_VERSION";
    fi
  # - mkdir -p ~/.cargo/
  # - cp .ci/cargo-config.toml ~/.cargo/config

before_script:
  # travis deploy bug on OSX systems:
  # https://github.com/travis-ci/travis-ci/issues/6307
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then
     rvm get stable;
    fi
  # setup our target environment
  # rustup target install $TARGET || true
  # (which cargo-install-update && cargo install-update cargo-update) || cargo install cargo-update
  # (which cargo-prune && cargo install-update cargo-prune) || cargo install cargo-prune
  # if [ ! -z $CLIPPY_VERSION ]; then
  #    if ! cargo clippy --version | grep -q $CLIPPY_VERSION; then
  #      cargo install clippy --vers=$CLIPPY_VERSION --force;
  #    fi
  #  else 
  #    (which rustfmt && cargo install-update rustfmt) || cargo install rustfmt;
  - curl -sSL https://github.com/maidsafe/QA/raw/master/travis/cargo_install.sh > cargo_install.sh
  - bash cargo_install.sh cargo-prune;
  - if [ "${TRAVIS_RUST_VERSION}" = 1.17.0 ]; then
      bash cargo_install.sh rustfmt 0.8.3;
    elif [ "${TRAVIS_OS_NAME}" = linux ]; then
      bash cargo_install.sh clippy 0.0.128;
    fi


script:
  - if [ ! -z $CLIPPY_VERSION ]; then
      bash .ci/clippy.sh;
    elif [ -z $TRAVIS_TAG ]; then 
      bash .ci/script.sh;
  # - if [ "${TRAVIS_RUST_VERSION}" = 1.17.0 ]; then
  #       (
  #           set -x;
  #           echo "--- Check format ---" &&
  #           cd ffi_utils &&
  #           cargo fmt -- --write-mode=diff &&
  #           cd ../safe_core &&
  #           cargo fmt -- --write-mode=diff &&
  #           cd ../safe_app &&
  #           cargo fmt -- --write-mode=diff &&
  #           cd ../safe_authenticator &&
  #           cargo fmt -- --write-mode=diff &&
  #           echo "--- Test ffi_utils ---" &&
  #           cd ../ffi_utils &&
  #           cargo test  --verbose --release &&
  #           echo "--- Check compilation against actual routing ---" &&
  #           cd ../safe_core &&
  #           cargo rustc --verbose --release &&
  #           cargo rustc --verbose --features testing --release --profile test --lib -- -Zno-trans &&
  #           cd ../safe_app &&
  #           cargo rustc --verbose --features testing --release --profile test --lib -- -Zno-trans &&
  #           cd ../safe_authenticator &&
  #           cargo rustc --verbose --features testing --release --profile test --lib -- -Zno-trans &&
  #           echo "--- Test against mock ---" &&
  #           cd ../safe_core &&
  #           cargo test --verbose --release --features "$Features" &&
  #           cd ../safe_app &&
  #           cargo test --verbose --release --features "$Features" &&
  #           cd ../safe_authenticator &&
  #           cargo test --verbose --release --features "$Features";
  #       );
  #   elif [ "${TRAVIS_OS_NAME}" = linux ]; then
  #       (
  #           set -x;
  #           cd ffi_utils && unset Features && cargo clippy && cargo clippy --profile=test && export Features="use-mock-routing testing" &&
  #           cd ../safe_core && cargo clippy && cargo clippy --profile=test --features="$Features" &&
  #           cd ../safe_app && cargo clippy --profile=test --features="$Features" &&
  #           cd ../safe_authenticator && cargo clippy --profile=test --features="$Features";
  #       )
    fi

before_cache:
  - cargo prune

before_deploy:
  - if [ ! -z $TRAVIS_TAG ]; then

      if [ ! -f Cargo.lock ]; then
        travis_wait 30 cargo generate-lockfile;
        cargo clean;
      fi

      bash .ci/before_deploy.sh;
    fi

deploy:
  # TODO update `api_key.secure`
  # - Create a `public_repo` GitHub token. Go to: https://github.com/settings/tokens/new
  # - Encrypt it: `travis encrypt YOUR_TOKEN`
  # - Paste the output down here
  api_key:
    secure: "eOHNMzl7+94kzYx2FsT+ItUyD7UIvoqPj/tNvIY0QgIkWLZqCIQfzDDgGhIL/v0LYKbdsrnkp1EjyhpR8yXqNBfXbR7DXVnlzO/dvAVPtl4DgKOzJCMact4JKsMetr0VzYfxa6HfQEGfxGAX12FET/i82x7jvDwc3kIBgcDmdKZdYP0lf3UWgka2JTHcDDjWQYaTBig6j8jK8vvmVg64tOVLhHZLpiG3zwz2btK8xrBDxw2LZwjoa5hRdhRJydyb5EypEeHBz9YQqWZU3ABaOJRNNbU7hFm5O2cOWmiUkSA9NrSkeWnsNlIDiZ6kDHmz+nWiZ8t0tAOgSABq1sLLl3UldQzVQW/b8grPwEGTRU6JFsBFM4pz4ZV/wuXRKWppV3iiuS2wnWDOa+jfBc9u+I908/Vb5aKq5cw2yrMi6kHf2xg1qYFhnyzzRF5Gfoz52X8I9TG+0u4PMQYtfpXjvkgjMEZmUl5T6BUhjGwSme7p9mPOiPaF4WI731YPZ+DeMSKWAyme4qG9fLG3E1wxrDZbTCdRj8An/w3WVwl+r97vMJZJiabDcik2XaxuakGIboru86CMG33viLwFtVfLdJnynlUOTGIBuBhSOytum1nT7Ql4+0yPhsHsz/vxkpdSEsUEPFF+tcYjlRPfdJkNNWySOFTTi5btmWa6oRQFb3U="
  file_glob: true
  file: "*.zip"
  on:
    # TODO Here you can pick which targets will generate binary releases
    # In this example, there are some targets that are tested using the stable
    # and nightly channels. This condition makes sure there is only one release
    # for such targets and that's generated using the stable channel
    condition: $TRAVIS_RUST_VERSION = "$DEPLOY_RUST_V"
    tags: true
  provider: releases
  skip_cleanup: true